UI图层修复指南 - 解决RawImage遮挡Tilemaps问题
=======================================================

问题描述：
5.26地图场景中Canvas的RawImage遮挡了tilemaps，导致游戏地图元素被UI背景覆盖。

问题原因：
1. Canvas的sortingOrder为0（默认值）
2. RawImage作为Canvas的子对象，继承了Canvas的渲染顺序
3. Tilemaps的sortingOrder通常在0-5之间
4. UI元素默认渲染在游戏对象之上

解决方案一：使用UILayerFix脚本（推荐 - 最简单）
===============================================

快速修复步骤：
1. 在场景中创建空GameObject，命名为"UILayerFix"
2. 添加UILayerFix脚本组件
3. 保持默认设置（autoFixOnStart = true, backgroundSortingOrder = -10）
4. 运行场景，脚本会自动修复所有包含RawImage的Canvas

手动修复步骤：
1. 选择UILayerFix对象
2. 在Inspector中点击"修复UI分层"按钮
3. 观察控制台输出，确认修复成功

解决方案二：使用编辑器工具（推荐 - 最方便）
========================================

1. 在Unity编辑器菜单栏选择"Tools" > "UI图层修复工具"
2. 在弹出的窗口中点击"一键修复RawImage遮挡问题"
3. 确认修复完成的对话框

解决方案三：手动修复Canvas设置
============================

1. 在Hierarchy面板中找到包含RawImage的Canvas
   - 通常名为"Canvas"或"Canvas (1)"

2. 选择Canvas对象

3. 在Inspector面板中找到Canvas组件

4. 设置以下参数：
   - 勾选"Override Sorting"
   - 设置"Sorting Order"为负值（推荐：-10）

5. 保存场景

解决方案四：使用CanvasLayerController脚本
======================================

1. 选择需要修复的Canvas对象
2. 添加CanvasLayerController组件
3. 配置参数：
   - canvasSortingOrder: -10（或其他负值）
   - autoSetOnStart: 勾选
   - showDebugInfo: 勾选（用于调试）
4. 运行场景或点击"设置Canvas为背景层"按钮

验证修复效果：
==============

运行游戏后检查：
1. RawImage应该显示在tilemaps后面
2. 游戏地图元素（墙壁、地面等）应该清晰可见
3. 控制台应该显示修复成功的绿色信息

推荐的渲染层级规划：
==================

背景层（Sorting Order: -10 到 -1）：
- 背景UI（RawImage等装饰性元素）
- 远景背景图片

游戏层（Sorting Order: 0 到 15）：
- 地面/背景 Tilemap: 0-2
- 墙壁/前景 Tilemap: 3-5
- 游戏对象（角色、敌人等）: 10-15

UI层（Sorting Order: 16+）：
- 前景UI（按钮、文字、血条等）: 16-20
- 弹窗、菜单等: 21+

常见问题排查：
==============

问题0：编译错误 - 找不到RawImage类型
- 错误信息："The type or namespace name 'RawImage' could not be found"
- 解决方案：确认脚本顶部已添加 `using UnityEngine.UI;`
- 如果仍有问题，使用SimpleCanvasFix.cs脚本（不依赖UI组件）

问题1：修复后RawImage完全不显示
- 检查Canvas是否被禁用
- 确认RawImage的Color.alpha不为0
- 检查RawImage是否有正确的材质/纹理

问题2：部分UI元素仍然遮挡游戏内容
- 检查是否有多个Canvas
- 确认所有包含背景UI的Canvas都被修复
- 使用"分析UI渲染层级"功能检查当前设置

问题3：修复后游戏运行异常
- 确认没有重要的前景UI被设置为背景层
- 检查按钮等交互UI是否仍然可用
- 必要时使用"重置所有Canvas"恢复默认设置

问题4：编辑器工具无法找到
- 确认脚本在Assets/Scripts目录下
- 重新编译脚本（菜单：Assets > Reimport All）
- 检查控制台是否有编译错误

高级设置：
==========

自定义排序层：
1. 打开Tags and Layers设置（Edit > Project Settings > Tags and Layers）
2. 添加新的Sorting Layer（如"Background UI"）
3. 在Canvas设置中选择对应的Sorting Layer

批量处理多个场景：
1. 创建预制件包含UILayerFix脚本
2. 在每个需要修复的场景中放置该预制件
3. 或者使用编辑器脚本批量处理所有场景

性能优化建议：
==============

1. 合并同类型的UI元素到同一Canvas
2. 禁用不需要射线检测的UI元素的"Raycast Target"
3. 使用Sprite Atlas优化UI纹理
4. 适当使用Canvas Group控制整组UI的显示

调试工具：
==========

使用UILayerFix提供的调试功能：
- "分析UI渲染层级"：查看当前所有UI和Tilemap的渲染顺序
- "显示推荐设置"：显示推荐的层级设置方案
- 控制台调试信息：实时查看修复过程

最佳实践：
==========

1. 项目开始时制定清晰的渲染层级规划
2. 使用负值排序顺序处理背景UI
3. 保持Tilemap在0-5的排序顺序
4. 为不同类型的UI使用不同的Canvas
5. 定期使用分析工具检查渲染层级

文件说明：
==========
- UILayerFix.cs: 主要修复脚本，包含自动修复和手动工具
- CanvasLayerController.cs: Canvas专用控制器，适合单个Canvas的精确控制
- UI图层修复指南.txt: 本文档，详细使用说明

修复完成检查清单：
==================
□ RawImage不再遮挡tilemaps
□ 游戏地图元素清晰可见
□ UI按钮等交互元素正常工作
□ 控制台没有相关错误信息
□ 游戏性能没有明显下降

如果遇到问题，请查看控制台输出的调试信息，或使用"分析UI渲染层级"功能检查当前设置。 