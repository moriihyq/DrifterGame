角色图层修复指南 - 解决角色在墙壁图层之下的问题
================================================================

问题描述：
角色（玩家）在游戏中显示在墙壁图层之下，导致角色被墙壁遮挡，影响游戏体验。

问题原因：
Unity中的2D渲染使用排序层（Sorting Layer）和排序顺序（Sorting Order）来确定对象的渲染顺序。
- 排序顺序值越大，对象显示越靠前
- 如果角色的排序顺序小于或等于墙壁的排序顺序，角色就会被墙壁遮挡

当前场景分析：
根据场景文件分析，墙壁TilemapRenderer的sortingOrder设置为：
- 基础墙壁层：0
- 装饰墙壁层：1-3  
- 前景墙壁层：4-5

解决方案：
================================================================

方案一：使用已更新的PlayerController（推荐）
-------------------------------------------
1. 已修改的PlayerController脚本现在包含自动渲染层级修复功能
2. 在Unity编辑器中选择玩家对象
3. 在PlayerController组件中找到"渲染层级设置"部分
4. 确保"playerSortingOrder"设置为10（或更高值）
5. 确保"autoFixLayerOnStart"选项已勾选
6. 运行游戏，脚本会自动修复玩家的渲染层级

方案二：使用SimplePlayerLayerFix脚本（推荐 - 兼容性最好）
----------------------------------------------------------
1. 将SimplePlayerLayerFix.cs脚本添加到玩家GameObject上
2. 在Inspector面板中配置以下参数：
   - playerSortingOrder: 10（确保高于墙壁的5）
   - autoFixOnStart: 勾选（启动时自动修复）
3. 这个脚本简单可靠，没有依赖问题

方案三：使用专用的PlayerLayerFix脚本
----------------------------------
1. 将PlayerLayerFix.cs脚本添加到玩家GameObject上
2. 在Inspector面板中配置以下参数：
   - playerSortingLayerName: "Player"（可选，留空使用默认层）
   - playerSortingOrder: 10（确保高于墙壁的5）
   - autoFixOnStart: 勾选（启动时自动修复）
   - continouslyFix: 可选（实时监控，通常不需要）

方案四：手动设置（适用于单个对象）
-------------------------------
1. 在Unity编辑器中选择玩家GameObject
2. 在Inspector面板中找到SpriteRenderer组件
3. 展开"Additional Settings"部分
4. 设置"Sorting Layer"为"Player"（如果有此层）或保持"Default"
5. 设置"Order in Layer"为10或更高值（确保大于墙壁的5）

方案五：批量修复所有玩家对象
--------------------------
1. 在任意带有PlayerLayerFix脚本的对象上
2. 在Inspector面板中右键点击该脚本
3. 选择"修复所有玩家层级"
4. 这将自动修复所有带有"Player"标签的对象

编译错误解决：
================================================================

如果遇到 "TilemapRenderer could not be found" 错误：
-----------------------------------------------------
这个问题已经修复，但如果仍然遇到：

1. 确保脚本开头包含正确的using语句：
   using UnityEngine;
   using UnityEngine.Tilemaps;

2. 如果仍有问题，使用SimplePlayerLayerFix.cs脚本替代
   这个脚本不依赖TilemapRenderer，兼容性更好

3. 检查Unity版本是否支持Tilemap系统：
   - Unity 2017.2 及以上版本支持
   - 如果是更旧版本，只使用SimplePlayerLayerFix.cs

调试和验证：
================================================================

检查当前设置：
1. 选择任意带有PlayerLayerFix脚本的对象
2. 右键点击脚本，选择"分析场景渲染层级"
3. 查看Console面板中的分析报告

验证修复效果：
1. 运行游戏
2. 观察玩家角色是否正确显示在墙壁之上
3. 查看Console面板中的修复日志

常见问题排查：
================================================================

问题1：脚本添加后没有效果
- 检查玩家对象是否有SpriteRenderer组件
- 确认脚本中的autoFixOnStart选项已勾选
- 查看Console面板是否有错误信息

问题2：玩家仍然在墙壁下方
- 增加playerSortingOrder的值（建议15-20）
- 确认墙壁的sortingOrder没有被意外设置得过高
- 使用"分析场景渲染层级"功能检查所有对象的排序设置

问题3：编译错误 TilemapRenderer not found
- 确保脚本包含 using UnityEngine.Tilemaps;
- 或者使用SimplePlayerLayerFix.cs脚本替代

问题4：其他角色（敌人、NPC）也有相同问题
- 为这些对象也添加类似的排序设置
- 或者修改它们的SpriteRenderer的Order in Layer值

最佳实践建议：
================================================================

1. 渲染层级规划：
   - 背景：-10 到 -1
   - 地面/平台：0 到 2  
   - 墙壁：3 到 5
   - 游戏对象（道具、机关）：6 到 8
   - 角色（玩家、敌人、NPC）：10 到 15
   - UI效果：16 到 20
   - 前景装饰：21 到 25

2. 使用排序层（Sorting Layers）：
   - 在Project Settings > Tags and Layers中创建专用排序层
   - 例如：Background, Environment, Characters, Effects, UI

3. 代码维护：
   - 在角色脚本中始终包含渲染层级设置
   - 使用常量定义标准的排序顺序值
   - 定期检查和验证渲染层级设置

4. 脚本选择建议：
   - 简单项目：使用SimplePlayerLayerFix.cs
   - 复杂项目：使用PlayerLayerFix.cs（功能更全面）
   - 编辑器工具：使用LayerFixEditorTool.cs进行批量处理

更新日志：
================================================================
- 已更新PlayerController.cs，添加自动渲染层级修复功能
- 创建了专用的PlayerLayerFix.cs脚本
- 创建了SimplePlayerLayerFix.cs脚本（兼容性最好）
- 修复了TilemapRenderer编译错误问题
- 提供了多种解决方案以适应不同需求

如果问题仍然存在，请检查：
1. Unity项目的Sorting Layers设置
2. 相机的渲染设置
3. 是否有其他脚本在运行时修改了排序设置
4. Unity版本是否支持使用的功能 